{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73290,"databundleVersionId":8710574,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/baseershah/eda-optuna-ensembling-high-accuracy?scriptVersionId=186272733\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"<h1 style=\"text-align: center; font-size: 48px; color: #FFFFFF; text-shadow: 2px 2px 5px #483D8B; background: rgba(0, 0, 0, 1); padding: 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); position: relative;\">\n    Classification with Academic Success\n</h1>\n<div style=\"position: relative; z-index: -1;\">\n    <div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>","metadata":{}},{"cell_type":"markdown","source":"<h3 style=\"text-align: center; font-size: 36px; color: #FFFFFF; text-shadow: 2px 2px 5px #000000; background: rgba(0, 0, 0, 0.8); padding: 10px 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); display: inline-block; margin: 0 auto;\">\n    NOTEBOOK ACHIEVEMENTS\n</h3>\n<div style=\"position: relative; z-index: -1; text-align: center;\">\n    <div style=\"display: inline-block; position: relative; width: 80%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>\n","metadata":{}},{"cell_type":"markdown","source":"<ul>\n  <li>Detailed eda for future engineering and extraction.</li>\n  <li>Statistical summary for all give features in the dataset.</li>\n  <li>Cross validation done using various models for ensembling(stacking). </li>\n  <li>Optimal hyperparameters achieved by optuna for various high performing models on this dataset.</li>\n  <li>Utilizing a Stacking classifier comprising of multiple ensemble methods, it aims to achieve high accuracy</li>\n\n</ul>\n","metadata":{}},{"cell_type":"markdown","source":"<h3 style=\"text-align: center; font-size: 24px; color: #FFFFFF; text-shadow: 2px 2px 5px #000000; background: rgba(0, 0, 0, 0.8); padding: 10px 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); display: inline-block; margin: 0 auto;\">\n    PRE-REQUISITES\n</h3>\n<div style=\"position: relative; z-index: -1; text-align: center;\">\n    <div style=\"display: inline-block; position: relative; width: 80%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>\n","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nimport optuna\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, \n                              GradientBoostingClassifier, ExtraTreesClassifier, \n                              BaggingClassifier, StackingClassifier, VotingClassifier)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-30T17:45:02.599477Z","iopub.execute_input":"2024-06-30T17:45:02.600185Z","iopub.status.idle":"2024-06-30T17:45:02.610402Z","shell.execute_reply.started":"2024-06-30T17:45:02.60015Z","shell.execute_reply":"2024-06-30T17:45:02.609389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h3 style=\"text-align: center; font-size: 24px; color: #FFFFFF; text-shadow: 2px 2px 5px #000000; background: rgba(0, 0, 0, 1); padding: 10px 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); display: inline-block; margin: 0 auto;\">\n    LOAD DATASET\n</h3>\n<div style=\"position: relative; z-index: -1; text-align: center;\">\n    <div style=\"display: inline-block; position: relative; width: 80%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>\n","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/playground-series-s4e6/train.csv\",index_col=[0])\ntest = pd.read_csv(\"/kaggle/input/playground-series-s4e6/test.csv\",index_col=[0])","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:02.61289Z","iopub.execute_input":"2024-06-30T17:45:02.613453Z","iopub.status.idle":"2024-06-30T17:45:02.989612Z","shell.execute_reply.started":"2024-06-30T17:45:02.613396Z","shell.execute_reply":"2024-06-30T17:45:02.988681Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = train.drop(\"Target\",axis=1)\ny = train[\"Target\"]","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:02.99083Z","iopub.execute_input":"2024-06-30T17:45:02.991144Z","iopub.status.idle":"2024-06-30T17:45:03.000483Z","shell.execute_reply.started":"2024-06-30T17:45:02.991117Z","shell.execute_reply":"2024-06-30T17:45:02.999531Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h3 style=\"text-align: center; font-size: 24px; color: #FFFFFF; text-shadow: 2px 2px 5px #000000; background: rgba(0, 0, 0, 1); padding: 10px 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); display: inline-block; margin: 0 auto;\">\n    EDA + PREPROCESSING\n</h3>\n<div style=\"position: relative; z-index: -1; text-align: center;\">\n    <div style=\"display: inline-block; position: relative; width: 80%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>\n","metadata":{}},{"cell_type":"code","source":"train.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.003076Z","iopub.execute_input":"2024-06-30T17:45:03.003766Z","iopub.status.idle":"2024-06-30T17:45:03.010323Z","shell.execute_reply.started":"2024-06-30T17:45:03.003727Z","shell.execute_reply":"2024-06-30T17:45:03.009286Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.isnull().sum().to_frame()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.011451Z","iopub.execute_input":"2024-06-30T17:45:03.012044Z","iopub.status.idle":"2024-06-30T17:45:03.031054Z","shell.execute_reply.started":"2024-06-30T17:45:03.01201Z","shell.execute_reply":"2024-06-30T17:45:03.030251Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.032159Z","iopub.execute_input":"2024-06-30T17:45:03.03255Z","iopub.status.idle":"2024-06-30T17:45:03.160056Z","shell.execute_reply.started":"2024-06-30T17:45:03.032515Z","shell.execute_reply":"2024-06-30T17:45:03.159229Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.161453Z","iopub.execute_input":"2024-06-30T17:45:03.161846Z","iopub.status.idle":"2024-06-30T17:45:03.346034Z","shell.execute_reply.started":"2024-06-30T17:45:03.161812Z","shell.execute_reply":"2024-06-30T17:45:03.345032Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.347418Z","iopub.execute_input":"2024-06-30T17:45:03.347802Z","iopub.status.idle":"2024-06-30T17:45:03.374819Z","shell.execute_reply.started":"2024-06-30T17:45:03.347774Z","shell.execute_reply":"2024-06-30T17:45:03.373803Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.nunique().to_frame()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.377856Z","iopub.execute_input":"2024-06-30T17:45:03.378189Z","iopub.status.idle":"2024-06-30T17:45:03.417664Z","shell.execute_reply.started":"2024-06-30T17:45:03.378161Z","shell.execute_reply":"2024-06-30T17:45:03.416639Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.418752Z","iopub.execute_input":"2024-06-30T17:45:03.419044Z","iopub.status.idle":"2024-06-30T17:45:03.438861Z","shell.execute_reply.started":"2024-06-30T17:45:03.419019Z","shell.execute_reply":"2024-06-30T17:45:03.437841Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"binary_features = [col for col in train.columns if train[col].nunique() == 2]\ncategorical_features = [col for col in train.columns if train[col].nunique() > 2 and train[col].nunique() <= 12]\nlong_categorical_features = [col for col in train.columns if train[col].nunique() >12 and train[col].nunique() <= 56]\ncontinuous_features = [col for col in train.columns if train[col].nunique() > 56]\n\nbinary_features = [col for col in binary_features if col != 'Target']\ncategorical_features = [col for col in categorical_features if col != 'Target']\ncontinuous_features = [col for col in continuous_features if col != 'Target']\nlong_categorical_features = [col for col in long_categorical_features if col != 'Target']","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.4403Z","iopub.execute_input":"2024-06-30T17:45:03.440962Z","iopub.status.idle":"2024-06-30T17:45:03.594113Z","shell.execute_reply.started":"2024-06-30T17:45:03.440925Z","shell.execute_reply":"2024-06-30T17:45:03.593261Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.countplot(data=train, x='Target', palette='viridis')\nplt.title('Distribution of Target Variable')\nplt.xlabel('Target')\nplt.ylabel('Count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.595434Z","iopub.execute_input":"2024-06-30T17:45:03.595768Z","iopub.status.idle":"2024-06-30T17:45:03.900756Z","shell.execute_reply.started":"2024-06-30T17:45:03.59574Z","shell.execute_reply":"2024-06-30T17:45:03.899725Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\ndef plot_continuous_distribution(df, features, target):\n    num_features = len(features)\n\n    for i in range(0, num_features, 2):\n        fig, axes = plt.subplots(2, 4, figsize=(20, 10))\n\n        for j in range(2):\n            if i + j < num_features:\n                feature = features[i + j]\n\n                with warnings.catch_warnings():\n                    warnings.simplefilter(action='ignore', category=FutureWarning)\n\n                    sns.histplot(df, x=feature, hue=target, kde=True, ax=axes[0, j*2], palette='viridis')\n                    axes[0, j*2].set_title(f'{feature} - Histogram & KDE')\n                    axes[0, j*2].grid(True)\n\n                    sns.boxplot(x=feature, y=target, data=df, ax=axes[0, j*2+1], palette='viridis')\n                    axes[0, j*2+1].set_title(f'{feature} - Box Plot')\n                    axes[0, j*2+1].grid(True)\n\n                stats.probplot(df[feature], dist=\"norm\", plot=axes[1, j*2])\n                axes[1, j*2].get_lines()[1].set_color('red')\n                axes[1, j*2].set_title(f'{feature} - QQ Plot')\n                axes[1, j*2].grid(True)\n\n                desc_stats = df[feature].describe()\n                skewness = df[feature].skew()\n                kurtosis = df[feature].kurt()\n                stats_text = (f'{feature} - Descriptive Statistics:\\n{desc_stats}\\n'\n                              f'Skewness: {skewness:.2f}, Kurtosis: {kurtosis:.2f}')\n                axes[1, j*2+1].text(0.5, 0.5, stats_text, ha='center', va='center', fontsize=12,\n                                    transform=axes[1, j*2+1].transAxes, bbox=dict(facecolor='white', alpha=0.5))\n                axes[1, j*2+1].axis('off')\n            else:\n                for k in range(2):\n                    axes[0, j*2+k].axis('off')\n                    axes[1, j*2+k].axis('off')\n\n        plt.tight_layout(pad=3.0)\n        plt.show()\n\nplot_continuous_distribution(train, continuous_features, 'Target')","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:03.902169Z","iopub.execute_input":"2024-06-30T17:45:03.90259Z","iopub.status.idle":"2024-06-30T17:45:15.696811Z","shell.execute_reply.started":"2024-06-30T17:45:03.902556Z","shell.execute_reply":"2024-06-30T17:45:15.695675Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def pairplot(df, features, target):\n    sns.set(style=\"whitegrid\", palette=\"muted\")\n\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\"ignore\", category=FutureWarning)\n        pairplot = sns.pairplot(df, vars=features, hue=target,\n                                diag_kind='kde',\n                                plot_kws={'alpha': 0.7, 's': 50, 'edgecolor': 'k'},\n                                diag_kws={'fill': True},\n                                palette='Set1')\n\n    pairplot.fig.suptitle('Pairplot of Continuous Features', fontsize=16, y=1.02)\n    for ax in pairplot.axes.flatten():\n        ax.set_xlabel(ax.get_xlabel(), fontsize=10)\n        ax.set_ylabel(ax.get_ylabel(), fontsize=10)\n        ax.tick_params(axis='both', which='major', labelsize=8)\n\n    handles = pairplot._legend.legendHandles\n    labels = list(pairplot._legend.texts)\n    pairplot._legend.remove()\n    pairplot.fig.legend(handles=handles, labels=[label.get_text() for label in labels], title=target, loc='upper right', bbox_to_anchor=(1.15, 1))\n\n    pairplot.fig.set_size_inches(12, 12)\n    pairplot.fig.subplots_adjust(top=0.9)\n    pairplot.fig.tight_layout(pad=2.0)\n    plt.show()\n\npairplot(train, continuous_features, \"Target\")","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:45:15.697992Z","iopub.execute_input":"2024-06-30T17:45:15.698326Z","iopub.status.idle":"2024-06-30T17:46:26.889369Z","shell.execute_reply.started":"2024-06-30T17:45:15.698297Z","shell.execute_reply":"2024-06-30T17:46:26.888259Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_categorical_distribution(df, features, target):\n    num_features = len(features)\n    \n    for i in range(0, num_features, 2):\n        fig, axes = plt.subplots(1, 2, figsize=(20, 6))\n        \n        for j in range(2):\n            if i + j < num_features:\n                feature = features[i + j]\n\n                sns.countplot(x=df[feature], hue=target, data=df, palette='viridis', ax=axes[j])\n                axes[j].set_title(f'{feature} - Count Plot')\n                axes[j].grid(True, axis='y')\n            else:\n                axes[j].axis('off')\n\n        plt.tight_layout(pad=3.0)\n        plt.show()\n        \n    \nplot_categorical_distribution(train, binary_features, \"Target\")\nplot_categorical_distribution(train, categorical_features, \"Target\")","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:46:26.890772Z","iopub.execute_input":"2024-06-30T17:46:26.891128Z","iopub.status.idle":"2024-06-30T17:46:33.056745Z","shell.execute_reply.started":"2024-06-30T17:46:26.891098Z","shell.execute_reply":"2024-06-30T17:46:33.05571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def violin_plots(df, continuous_features, categorical_features, target):\n    sns.set(style=\"whitegrid\", palette=\"muted\")\n    \n    def create_violin_grid(features, title):\n        plots_per_row = 2\n        num_features = len(features)\n        num_rows = (num_features + plots_per_row - 1) // plots_per_row\n        fig, axes = plt.subplots(nrows=num_rows, ncols=plots_per_row, figsize=(15, 5 * num_rows))\n        axes = axes.flatten()\n        for i, feature in enumerate(features):\n            sns.violinplot(x=target, y=feature, data=df, ax=axes[i], palette='Set1')\n            axes[i].set_xlabel(target, fontsize=12)\n            axes[i].set_ylabel(feature, fontsize=12)\n            axes[i].tick_params(axis='both', which='major', labelsize=10)\n        for j in range(i + 1, len(axes)):\n            fig.delaxes(axes[j])\n        fig.suptitle(title, fontsize=16, y=1.02)\n        fig.tight_layout(pad=1.0)\n        plt.show()\n\n    create_violin_grid(continuous_features, 'Violin Plots of Continuous Features')\n    create_violin_grid(categorical_features, 'Violin Plots of Categorical Features')\n\nviolin_plots(train, continuous_features, categorical_features, \"Target\")","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:46:33.057894Z","iopub.execute_input":"2024-06-30T17:46:33.058172Z","iopub.status.idle":"2024-06-30T17:46:39.166332Z","shell.execute_reply.started":"2024-06-30T17:46:33.058148Z","shell.execute_reply":"2024-06-30T17:46:39.165256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_long_categorical_distribution(df, features, target):\n    num_features = len(features)\n    \n    for i in range(0, num_features, 2):\n        fig, axes = plt.subplots(1, 2, figsize=(20, 6))\n        \n        for j in range(2):\n            if i + j < num_features:\n                feature = features[i + j]\n                sns.countplot(x=df[feature], hue=target, data=df, palette='viridis', ax=axes[j])\n                axes[j].set_title(f'{feature} - Count Plot')\n                axes[j].grid(True, axis='y')\n            else:\n                axes[j].axis('off')\n\n        plt.tight_layout(pad=3.0)\n        plt.show()\n\nlonger_cats = [\"Father's occupation\", \"Mother's occupation\"]\nlong_categorical_features = list(set(long_categorical_features) - set(longer_cats))\nplot_long_categorical_distribution(train, long_categorical_features, 'Target')","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:46:39.167823Z","iopub.execute_input":"2024-06-30T17:46:39.168232Z","iopub.status.idle":"2024-06-30T17:46:52.84564Z","shell.execute_reply.started":"2024-06-30T17:46:39.168183Z","shell.execute_reply":"2024-06-30T17:46:52.844476Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr_matrix = X.corr()\nfig, ax = plt.subplots(figsize=(15, 12))\nsns.heatmap(corr_matrix, annot=False, cmap='viridis', center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, ax=ax)\nax.set_title('Correlation Heatmap of All Features', fontsize=18)\nfig.tight_layout()\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:46:52.847262Z","iopub.execute_input":"2024-06-30T17:46:52.847722Z","iopub.status.idle":"2024-06-30T17:46:54.543319Z","shell.execute_reply.started":"2024-06-30T17:46:52.847682Z","shell.execute_reply":"2024-06-30T17:46:54.542271Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def mutual_info_classifier(X, y, n_features):\n\n    mi = mutual_info_classif(X, y, discrete_features='auto')\n    mi = pd.Series(mi, index=X.columns)\n    mi = mi.sort_values(ascending=False)\n    \n    return mi.head(n_features)\n\ndef plot_mutual_info(mi_scores):\n    plt.figure(figsize=(14, 8))\n    ax = mi_scores.sort_values(ascending=True).plot(kind='barh', color='green')\n    ax.set_title('Mutual Information Scores', fontsize=16)\n    ax.set_xlabel('Mutual Information', fontsize=14)\n    ax.set_ylabel('Features', fontsize=14)\n    ax.xaxis.grid(True)\n    plt.tight_layout()\n    plt.show()\n\nmi_scores = mutual_info_classifier(X, y, 36)\nplot_mutual_info(mi_scores)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T18:11:19.293241Z","iopub.execute_input":"2024-06-30T18:11:19.293665Z","iopub.status.idle":"2024-06-30T18:11:36.96167Z","shell.execute_reply.started":"2024-06-30T18:11:19.293633Z","shell.execute_reply":"2024-06-30T18:11:36.960586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"scaler = RobustScaler()\nX[continuous_features] = scaler.fit_transform(X[continuous_features])","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.094449Z","iopub.execute_input":"2024-06-30T17:47:12.094849Z","iopub.status.idle":"2024-06-30T17:47:12.119093Z","shell.execute_reply.started":"2024-06-30T17:47:12.094813Z","shell.execute_reply":"2024-06-30T17:47:12.118251Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **OPTIONAL - (OUTLIER REMOVAL)**","metadata":{}},{"cell_type":"code","source":"# iso_forest = IsolationForest(contamination=0.01,random_state=42)\n# outliers = iso_forest.fit_predict(X)\n\n# outliers = pd.Series(outliers, index=train.index)\n# train_cleaned = train[outliers == 1]\n# X_cleaned = train_cleaned.drop(columns=[\"Target\"])\n# y_cleaned = train_cleaned[\"Target\"]","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.120265Z","iopub.execute_input":"2024-06-30T17:47:12.120554Z","iopub.status.idle":"2024-06-30T17:47:12.125331Z","shell.execute_reply.started":"2024-06-30T17:47:12.12053Z","shell.execute_reply":"2024-06-30T17:47:12.1242Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h3 style=\"text-align: center; font-size: 24px; color: #FFFFFF; text-shadow: 2px 2px 5px #000000; background: rgba(0, 0, 0, 1); padding: 10px 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); display: inline-block; margin: 0 auto;\">\n    MODEL VALIDATION\n</h3>\n<div style=\"position: relative; z-index: -1; text-align: center;\">\n    <div style=\"display: inline-block; position: relative; width: 80%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>\n","metadata":{}},{"cell_type":"markdown","source":"## **High performance models taken for optuna by cross validation**","metadata":{}},{"cell_type":"code","source":"# models = {\n#     \"RandomForest\": RandomForestClassifier(),\n#     \"AdaBoost\": AdaBoostClassifier(),\n#     \"GradientBoosting\": GradientBoostingClassifier(),\n#     \"ExtraTrees\": ExtraTreesClassifier(),\n#     \"LightGBM\": LGBMClassifier(),\n#     \"CatBoost\": CatBoostClassifier(verbose=0),\n# }\n\n# # KFold cross-validation\n# kf = KFold(n_splits=3, shuffle=True, random_state=1)\n\n# # Dictionary to store results\n# results = {}\n\n# # Evaluate each model\n# for name, model in models.items():\n#     cv_results = cross_val_score(model, X, y, cv=kf, scoring='accuracy',n_jobs=-1)\n#     results[name] = cv_results\n#     print(f\"{name} - Accuracy: {cv_results.mean():.4f} (+/- {cv_results.std():.4f})\")\n\n# # Display summary of results\n# results_df = pd.DataFrame(results).T\n# results_df.columns = ['Fold 1', 'Fold 2', 'Fold 3']\n# results_df['Mean Accuracy'] = results_df.mean(axis=1)\n# results_df['Std Dev'] = results_df.std(axis=1)\n\n# print(\"\\nSummary of results:\")\n# print(results_df)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.126568Z","iopub.execute_input":"2024-06-30T17:47:12.126864Z","iopub.status.idle":"2024-06-30T17:47:12.134629Z","shell.execute_reply.started":"2024-06-30T17:47:12.126838Z","shell.execute_reply":"2024-06-30T17:47:12.133761Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **OPTUNA**","metadata":{}},{"cell_type":"code","source":"def objective_random_forest(trial):\n    param = {\n        'n_estimators': trial.suggest_int('n_estimators', 50, 500),\n        'max_depth': trial.suggest_int('max_depth', 2, 32),\n        'min_samples_split': trial.suggest_int('min_samples_split', 2, 14),\n        'min_samples_leaf': trial.suggest_int('min_samples_leaf', 1, 14),\n        'max_features': trial.suggest_categorical('max_features', ['auto', 'sqrt', 'log2'])\n    }\n    model = RandomForestClassifier(**param)\n    kf = KFold(n_splits=3, shuffle=True, random_state=1)\n    return cross_val_score(model, X, y, cv=kf, scoring='accuracy', n_jobs=-1).mean()\n\ndef objective_gradient_boosting(trial):\n    param = {\n        'n_estimators': trial.suggest_int('n_estimators', 50, 500),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 0.01, 0.1),\n        'max_depth': trial.suggest_int('max_depth', 2, 32),\n        'min_samples_split': trial.suggest_int('min_samples_split', 2, 14),\n        'min_samples_leaf': trial.suggest_int('min_samples_leaf', 1, 14),\n        'max_features': trial.suggest_categorical('max_features', [1.0, 'sqrt', 'log2'])\n    }\n    model = GradientBoostingClassifier(**param)\n    kf = KFold(n_splits=3, shuffle=True, random_state=1)\n    return cross_val_score(model, X, y, cv=kf, scoring='accuracy', n_jobs=-1).mean()\n\ndef objective_ada_boost(trial):\n    param = {\n        'n_estimators': trial.suggest_int('n_estimators', 50, 500),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 0.01, 1.0)\n    }\n    model = AdaBoostClassifier(**param)\n    kf = KFold(n_splits=3, shuffle=True, random_state=1)\n    return cross_val_score(model, X, y, cv=kf, scoring='accuracy', n_jobs=-1).mean()\n\ndef objective_extra_trees(trial):\n    param = {\n        'n_estimators': trial.suggest_int('n_estimators', 50, 500),\n        'max_depth': trial.suggest_int('max_depth', 2, 32),\n        'min_samples_split': trial.suggest_int('min_samples_split', 2, 14),\n        'min_samples_leaf': trial.suggest_int('min_samples_leaf', 1, 14),\n        'max_features': trial.suggest_categorical('max_features', [1.0, 'sqrt', 'log2'])\n    }\n    model = ExtraTreesClassifier(**param)\n    kf = KFold(n_splits=3, shuffle=True, random_state=1)\n    return cross_val_score(model, X, y, cv=kf, scoring='accuracy', n_jobs=-1).mean()\n\ndef objective_lgbm(trial):\n    param = {\n        'n_estimators': trial.suggest_int('n_estimators', 50, 500),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 0.01, 1.0),\n        'num_leaves': trial.suggest_int('num_leaves', 31, 256),\n        'max_depth': trial.suggest_int('max_depth', -1, 32),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'subsample': trial.suggest_uniform('subsample', 0.4, 1.0),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.4, 1.0),\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-8, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-8, 10.0)\n    }\n    model = LGBMClassifier(**param)\n    kf = KFold(n_splits=3, shuffle=True, random_state=1)\n    return cross_val_score(model, X, y, cv=kf, scoring='accuracy', n_jobs=-1).mean()\n\ndef objective_catboost(trial):\n    param = {\n        'iterations': trial.suggest_int('iterations', 50, 500),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 0.01, 1.0),\n        'depth': trial.suggest_int('depth', 1, 16),\n        'l2_leaf_reg': trial.suggest_loguniform('l2_leaf_reg', 1e-8, 10.0),\n        'border_count': trial.suggest_int('border_count', 1, 255)\n    }\n    model = CatBoostClassifier(**param, silent=True)\n    kf = KFold(n_splits=3, shuffle=True, random_state=1)\n    return cross_val_score(model, X, y, cv=kf, scoring='accuracy', n_jobs=-1).mean()\n\n# Define study and optimize for each model\n# study_rf = optuna.create_study(direction='maximize')\n# study_rf.optimize(objective_random_forest, n_trials=50, n_jobs=-1)\n# print(f\"Random Forest Best Params: {study_rf.best_params}, Best Score: {study_rf.best_value}\")\n\n# study_gb = optuna.create_study(direction='maximize')\n# study_gb.optimize(objective_gradient_boosting, n_trials=50, n_jobs=-1)\n# print(f\"Gradient Boosting Best Params: {study_gb.best_params}, Best Score: {study_gb.best_value}\")\n\n# study_ab = optuna.create_study(direction='maximize')\n# study_ab.optimize(objective_ada_boost, n_trials=50, n_jobs=-1)\n# print(f\"AdaBoost Best Params: {study_ab.best_params}, Best Score: {study_ab.best_value}\")\n\n# study_et = optuna.create_study(direction='maximize')\n# study_et.optimize(objective_extra_trees, n_trials=50, n_jobs=-1)\n# print(f\"Extra Trees Best Params: {study_et.best_params}, Best Score: {study_et.best_value}\")\n\n# study_lgbm = optuna.create_study(direction='maximize')\n# study_lgbm.optimize(objective_lgbm, n_trials=50, n_jobs=-1)\n# print(f\"LGBM Best Params: {study_lgbm.best_params}, Best Score: {study_lgbm.best_value}\")\n\n# study_catboost = optuna.create_study(direction='maximize')\n# study_catboost.optimize(objective_catboost, n_trials=50, n_jobs=-1)\n# print(f\"CatBoost Best Params: {study_catboost.best_params}, Best Score: {study_catboost.best_value}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.136285Z","iopub.execute_input":"2024-06-30T17:47:12.136744Z","iopub.status.idle":"2024-06-30T17:47:12.157706Z","shell.execute_reply.started":"2024-06-30T17:47:12.136709Z","shell.execute_reply":"2024-06-30T17:47:12.156652Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Random Forest Best Params: {'n_estimators': 463, 'max_depth': 28, 'min_samples_split': 14, 'min_samples_leaf': 1, 'max_features': 'sqrt'}, Best Score: 0.8279228416843095\n# Gradient Boosting Best Params: {'n_estimators': 315, 'learning_rate': 0.05095896948189761, 'max_depth': 6, 'min_samples_split': 3, 'min_samples_leaf': 13, 'max_features': 'sqrt'}, Best Score: 0.8319741760108732\n# AdaBoost Best Params: {'n_estimators': 419, 'learning_rate': 0.8962438596851486}, Best Score: 0.8270602995373637\n# Extra Trees Best Params: {'n_estimators': 497, 'max_depth': 22, 'min_samples_split': 14, 'min_samples_leaf': 4, 'max_features': 1.0}, Best Score: 0.8261324132883766\n# LGBM Best Params: {'n_estimators': 265, 'learning_rate': 0.027225861060853295, 'num_leaves': 162, 'max_depth': 26, 'min_child_samples': 86, 'subsample': 0.4286447710765045, 'colsample_bytree': 0.529873872425367, 'reg_alpha': 0.17191518296157335, 'reg_lambda': 0.8413347467806415}, Best Score: 0.8326798923129198\n# CatBoost Best Params: {'iterations': 464, 'learning_rate': 0.14075100740698163, 'depth': 4, 'l2_leaf_reg': 4.888581115715009e-06, 'border_count': 154}, Best Score: 0.8306803627904547","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.162374Z","iopub.execute_input":"2024-06-30T17:47:12.1627Z","iopub.status.idle":"2024-06-30T17:47:12.170087Z","shell.execute_reply.started":"2024-06-30T17:47:12.162667Z","shell.execute_reply":"2024-06-30T17:47:12.169196Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf_params={'n_estimators': 463, 'max_depth': 28, 'min_samples_split': 14, 'min_samples_leaf': 1, 'max_features': 'sqrt'}\ngbr_params={'n_estimators': 315, 'learning_rate': 0.05095896948189761, 'max_depth': 6, 'min_samples_split': 3, 'min_samples_leaf': 13, 'max_features': 'sqrt'}\nada_params={'n_estimators': 419, 'learning_rate': 0.8962438596851486}\net_params={'n_estimators': 497, 'max_depth': 22, 'min_samples_split': 14, 'min_samples_leaf': 4, 'max_features': 1.0}\nlgbm_params={'n_estimators': 265, 'learning_rate': 0.027225861060853295, 'num_leaves': 162, 'max_depth': 26, 'min_child_samples': 86, 'subsample': 0.4286447710765045, 'colsample_bytree': 0.529873872425367, 'reg_alpha': 0.17191518296157335, 'reg_lambda': 0.8413347467806415}\ncat_params={'iterations': 464, 'learning_rate': 0.14075100740698163, 'depth': 4, 'l2_leaf_reg': 4.888581115715009e-06, 'border_count': 154}","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.171203Z","iopub.execute_input":"2024-06-30T17:47:12.171537Z","iopub.status.idle":"2024-06-30T17:47:12.182999Z","shell.execute_reply.started":"2024-06-30T17:47:12.171512Z","shell.execute_reply":"2024-06-30T17:47:12.182043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h3 style=\"text-align: center; font-size: 24px; color: #FFFFFF; text-shadow: 2px 2px 5px #000000; background: rgba(0, 0, 0, 1); padding: 10px 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); display: inline-block; margin: 0 auto;\">\n    MODEL TRAINING\n</h3>\n<div style=\"position: relative; z-index: -1; text-align: center;\">\n    <div style=\"display: inline-block; position: relative; width: 80%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>\n","metadata":{}},{"cell_type":"code","source":"rf = RandomForestClassifier(**rf_params)\ngbr = GradientBoostingClassifier(**gbr_params)\nada = AdaBoostClassifier(**ada_params)\net = ExtraTreesClassifier(**et_params)\nlgbm = LGBMClassifier(**lgbm_params, verbose=-1)\ncat = CatBoostClassifier(**cat_params, verbose=False)\n\nbase_classifiers = [\n    ('Random Forest', rf),\n    ('Gradient Boosting', gbr),\n    ('Ada Boost', ada),\n    ('Extra Trees', et),\n    ('lgbm', lgbm),\n    ('Cat Boost', cat)\n]\nbase_classifiers2 = [\n    ('Gradient Boosting', gbr),\n    ('lgbm', lgbm),\n    ('Cat Boost', cat)\n]","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.184202Z","iopub.execute_input":"2024-06-30T17:47:12.184535Z","iopub.status.idle":"2024-06-30T17:47:12.195864Z","shell.execute_reply.started":"2024-06-30T17:47:12.184508Z","shell.execute_reply":"2024-06-30T17:47:12.194953Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"meta_model = LogisticRegression(multi_class='multinomial', random_state=42)\nstacking_clf = StackingClassifier(estimators=base_classifiers2, final_estimator=meta_model, n_jobs=-1)\n\nstacking_clf.fit(X, y)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:47:12.197102Z","iopub.execute_input":"2024-06-30T17:47:12.197496Z","iopub.status.idle":"2024-06-30T17:53:59.702979Z","shell.execute_reply.started":"2024-06-30T17:47:12.197462Z","shell.execute_reply":"2024-06-30T17:53:59.701639Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(len(base_classifiers2), 1, figsize=(14, 7 * len(base_classifiers2)))\nfeatures = X.columns.tolist() \nfor ax, (_, clf) in zip(axes, stacking_clf.named_estimators_.items()):\n    if isinstance(clf, GradientBoostingClassifier):\n        importances = clf.feature_importances_\n        title = 'Feature Importance - Gradient Boosting'\n    elif isinstance(clf, LGBMClassifier):\n        importances = clf.feature_importances_\n        title = 'Feature Importance - LightGBM'\n    elif isinstance(clf, CatBoostClassifier):\n        importances = clf.get_feature_importance()\n        title = 'Feature Importance - CatBoost'\n    else:\n        continue\n\n    indices = np.argsort(importances)[::-1]\n    sorted_feature_names = [features[i] for i in indices]\n    ax.barh(sorted_feature_names, importances[indices], align='center', color='green')\n    ax.set_title(title, fontsize=14)\n    ax.set_xlabel('Importance', fontsize=12)\n    ax.tick_params(axis='y', which='major', labelsize=10)  # Adjust y-axis tick font size\n    ax.tick_params(axis='x', which='major', labelsize=10)  # Adjust x-axis tick font size\n    \naxes[-1].text(0.5, -0.15, 'International and Educational Special needs features need to go as they contribute nothing',\n              ha='center', va='center', transform=axes[-1].transAxes, fontsize=12, color='blue')\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T18:16:48.753195Z","iopub.execute_input":"2024-06-30T18:16:48.753613Z","iopub.status.idle":"2024-06-30T18:16:50.761683Z","shell.execute_reply.started":"2024-06-30T18:16:48.75358Z","shell.execute_reply":"2024-06-30T18:16:50.760509Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## import joblib\n# joblib.dump(stacking_clf, 'stacking_clf(PSS4E6).joblib')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.488843Z","iopub.status.idle":"2024-06-30T17:54:00.489191Z","shell.execute_reply.started":"2024-06-30T17:54:00.489028Z","shell.execute_reply":"2024-06-30T17:54:00.489043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h3 style=\"text-align: center; font-size: 24px; color: #FFFFFF; text-shadow: 2px 2px 5px #000000; background: rgba(0, 0, 0, 1); padding: 10px 20px; border-radius: 15px; box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5); display: inline-block; margin: 0 auto;\">\n    TEST PREPROCESSING+PREDICTIONS\n</h3>\n<div style=\"position: relative; z-index: -1; text-align: center;\">\n    <div style=\"display: inline-block; position: relative; width: 80%; height: 100%; overflow: hidden;\">\n        <div style=\"position: absolute; width: 200%; height: 200%; background: repeating-linear-gradient(135deg, #00FF00, #00FF00 10px, #000000 10px, #000000 20px); opacity: 0.7;\"></div>\n    </div>\n</div>\n","metadata":{}},{"cell_type":"code","source":"test = pd.read_csv(\"/kaggle/input/playground-series-s4e6/test.csv\")\nidx = test['id']\ntest_new = pd.read_csv(\"/kaggle/input/playground-series-s4e6/test.csv\", index_col=[0])\n# test_preds = rf_clf.predict(test)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.490401Z","iopub.status.idle":"2024-06-30T17:54:00.492088Z","shell.execute_reply.started":"2024-06-30T17:54:00.4919Z","shell.execute_reply":"2024-06-30T17:54:00.491917Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_new[continuous_features] = scaler.transform(test_new[continuous_features])","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.493562Z","iopub.status.idle":"2024-06-30T17:54:00.493998Z","shell.execute_reply.started":"2024-06-30T17:54:00.493796Z","shell.execute_reply":"2024-06-30T17:54:00.493819Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_preds = stacking_clf.predict(test_new)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.495137Z","iopub.status.idle":"2024-06-30T17:54:00.495659Z","shell.execute_reply.started":"2024-06-30T17:54:00.495393Z","shell.execute_reply":"2024-06-30T17:54:00.495422Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_preds","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.497747Z","iopub.status.idle":"2024-06-30T17:54:00.498111Z","shell.execute_reply.started":"2024-06-30T17:54:00.497932Z","shell.execute_reply":"2024-06-30T17:54:00.497948Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission_df = pd.DataFrame({\n    'id':test[\"id\"],\n    \"Target\":test_preds\n})","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.499403Z","iopub.status.idle":"2024-06-30T17:54:00.499749Z","shell.execute_reply.started":"2024-06-30T17:54:00.49958Z","shell.execute_reply":"2024-06-30T17:54:00.499595Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission_df","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.501066Z","iopub.status.idle":"2024-06-30T17:54:00.501463Z","shell.execute_reply.started":"2024-06-30T17:54:00.501268Z","shell.execute_reply":"2024-06-30T17:54:00.501284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission_df.to_csv('submission.csv',index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T17:54:00.50297Z","iopub.status.idle":"2024-06-30T17:54:00.503361Z","shell.execute_reply.started":"2024-06-30T17:54:00.503151Z","shell.execute_reply":"2024-06-30T17:54:00.503166Z"},"trusted":true},"execution_count":null,"outputs":[]}]}